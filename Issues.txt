import pandas as pd
import json
import glob
import os

# Configuration
OUTPUT_DIR = "./output"
COMPARISON_FOLDER = os.path.join(OUTPUT_DIR, "comparison")
NUM_SAMPLES_PER_FILE = 3  # Number of sample rows to show per file

# Get all comparison files
comparison_files = sorted(glob.glob(os.path.join(COMPARISON_FOLDER, "comparison_part_*.csv")))

print(f"Found {len(comparison_files)} comparison files\n")
print("="*100)

# Track statistics
total_non_empty_without = 0
total_non_empty_with = 0
total_comparison_rows = 0

for comp_file in comparison_files[:5]:  # Check first 5 files, adjust as needed
    print(f"\nüìÅ FILE: {os.path.basename(comp_file)}")
    print("="*100)
    
    # Read comparison file
    df_comp = pd.read_csv(comp_file, low_memory=False)
    total_comparison_rows += len(df_comp)
    
    # Find rows with non-empty JSON (not "[]" and not empty string)
    df_comp['without_has_data'] = df_comp['without_zone_output'].apply(
        lambda x: str(x) not in ['[]', '', 'nan', 'MISSING ROW', 'N/A']
    )
    df_comp['with_has_data'] = df_comp['with_zone_output'].apply(
        lambda x: str(x) not in ['[]', '', 'nan', 'MISSING ROW', 'N/A']
    )
    
    non_empty_rows = df_comp[df_comp['without_has_data'] | df_comp['with_has_data']]
    
    count_without = df_comp['without_has_data'].sum()
    count_with = df_comp['with_has_data'].sum()
    
    total_non_empty_without += count_without
    total_non_empty_with += count_with
    
    print(f"üìä Stats: Total rows={len(df_comp)}, Non-empty without_zone={count_without}, Non-empty with_zone={count_with}")
    print(f"üéØ Match Status: {(df_comp['match_status']=='MATCH').sum()} MATCH, {(df_comp['match_status']=='MISMATCH').sum()} MISMATCH\n")
    
    # Sample rows with actual data
    sample_rows = non_empty_rows.head(NUM_SAMPLES_PER_FILE)
    
    if len(sample_rows) == 0:
        print("‚ö†Ô∏è  No rows with data found in this file\n")
        continue
    
    for idx, row in sample_rows.iterrows():
        print(f"\n{'‚îÄ'*100}")
        print(f"ROW {row.get('row_number', idx)} | Status: {row['match_status']} | ID: {row.iloc[1]}")
        print(f"{'‚îÄ'*100}")
        
        # Parse and pretty print JSON
        try:
            without_json = json.loads(row['without_zone_output']) if isinstance(row['without_zone_output'], str) else row['without_zone_output']
            without_str = json.dumps(without_json, indent=2, ensure_ascii=False)
        except:
            without_str = str(row['without_zone_output'])
        
        try:
            with_json = json.loads(row['with_zone_output']) if isinstance(row['with_zone_output'], str) else row['with_zone_output']
            with_str = json.dumps(with_json, indent=2, ensure_ascii=False)
        except:
            with_str = str(row['with_zone_output'])
        
        # Split into lines for side-by-side comparison
        without_lines = without_str.split('\n')
        with_lines = with_str.split('\n')
        max_lines = max(len(without_lines), len(with_lines))
        
        print("\nüîµ WITHOUT ZONE" + " "*28 + "üü¢ WITH ZONE")
        print("‚îÄ"*50 + "‚îÇ" + "‚îÄ"*49)
        
        for i in range(max_lines):
            left = without_lines[i] if i < len(without_lines) else ""
            right = with_lines[i] if i < len(with_lines) else ""
            print(f"{left:<49}‚îÇ {right}")
        
        if row['match_status'] != 'MATCH':
            print(f"\nüí¨ Comment: {row['comments']}")

print("\n" + "="*100)
print("üìà OVERALL STATISTICS")
print("="*100)
print(f"Total comparison rows checked: {total_comparison_rows:,}")
print(f"Total non-empty without_zone outputs: {total_non_empty_without:,}")
print(f"Total non-empty with_zone outputs: {total_non_empty_with:,}")
print(f"Difference: {abs(total_non_empty_without - total_non_empty_with):,}")

if total_non_empty_without == total_non_empty_with:
    print("‚úÖ Counts match!")
else:
    print("‚ö†Ô∏è  Counts don't match - investigate further!")
